import pickle 
import argparse
import os
from pathlib import Path
from typing import Dict, List, Optional, Union

from tqdm import tqdm

from rxnebm.proposer.gln_config import gln_config
from rxnebm.proposer.gln_proposer import GLNProposer

def gen_50k(topk: int = 200,
            beam_size: Optional[int] = 50,
            phases: Optional[List[str]] = ['train', 'valid', 'test'],
            start_idx : Optional[int] = 0,
            end_idx : Optional[int] = None,
            location: str = 'COLAB',
            input_data_folder: Optional[Union[str, bytes, os.PathLike]] = None,
            input_data_file_prefix: Optional[str] = '50k_clean_rxnsmi_noreagent_allmapped',
            output_folder: Optional[Union[str, bytes, os.PathLike]] = None
            ):
    '''
    Parameters
    ----------
    topk : int (Default = 200)
        for each product, how many of all the total proposals generated by GLN to be extracted 
    beam_size : int (Default = 50)
        beam size to use for ranking generated proposals
    phases : List[str] (Default = ['train', 'valid', 'test'])
        phases to generate GLN proposals for
    location : str (Default = 'COLAB')
        location where script is run; affects default value of output_folder 
    input_data_folder : Optional[Union[str, bytes, os.PathLike]] (Default = None)
        path to the folder containing the train/valid/test reaction SMILES strings 
        if None, this defaults to:   path/to/rxn/ebm/data/cleaned_data/ 
    input_data_file_prefix : Optional[str] (Default = '50k_clean_rxnsmi_noreagent_allmapped')
        prefix of the 3 pickle files containing the train/valid/test reaction SMILES strings
    output_folder : Optional[Union[str, bytes, os.PathLike]] (Default = None)
        path to the folder that will contain the output dicts containing GLN's proposals 
        if None and if location is NOT 'COLAB', this defaults to the same folder as input_data_folder
        otherwise (i.e. we are at 'COLAB'), it defaults to a hardcoded gdrive folder 
    '''
    proposer = GLNProposer(gln_config)
    
    if input_data_folder is None or input_data_folder == '':
        input_folder = Path(__file__).resolve() / 'data/cleaned_data/' 
    else:
        input_folder = Path(input_data_folder)
    if output_folder is None or output_folder == '':
        if location == 'COLAB':
            output_folder = Path('/content/gdrive/MyDrive/rxn_ebm/datasets/Retro_Reproduction/GLN_proposals/')
        else:
            output_folder = input_folder
    else:
        output_folder = Path(output_folder)

    clean_50k = {} 
    for phase in phases:
        with open(input_folder / f'{input_data_file_prefix}_{phase}.pickle', 'rb') as handle:
            clean_50k[phase] = pickle.load(handle)

        phase_proposals = {} # key = prod_smi, value = Dict[template, reactants, scores]
        print(f'Calculting for start_idx: {start_idx}, end_idx: {end_idx}')
        for i, rxn_smi in enumerate(
                                tqdm(
                                    clean_50k[phase][ start_idx : end_idx ], 
                                    desc=f'Generating GLN proposals for {phase}'
                                )
                            ):
            prod_smi = rxn_smi.split('>>')[-1]
            rxn_type = ["UNK"]

            curr_proposals = proposer.propose([prod_smi], rxn_type, topk=topk, beam_size=beam_size)
            phase_proposals[prod_smi] = curr_proposals[0] # curr_proposals is a list w/ 1 element (which is a dict)

            if i > 0 and i % 4000 == 0: # checkpoint
                print(f'Checkpointing {i} for {phase}')
                with open(output_folder / f'GLN_proposed_smiles_{phase}_{i + start_idx}.pickle', 'wb') as handle:
                    pickle.dump(phase_proposals, handle, protocol=pickle.HIGHEST_PROTOCOL)
        
        with open(output_folder / f'GLN_proposed_smiles_{phase}_start{start_idx}_end{end_idx}.pickle', 'wb') as handle:
            pickle.dump(phase_proposals, handle, protocol=pickle.HIGHEST_PROTOCOL)
        print(f'Successfully finished {phase}!')

    """
    List of n[{"template": List of topk templates,
               "reactants": List of topk reactants,
               "scores": ndarray of topk scores}]
    """

def parse_args():
    parser = argparse.ArgumentParser("gen_GLN_proposals.py")
    parser.add_argument('-f') # filler for COLAB
    
    parser.add_argument("--input_data_folder", help="input data folder", type=str)
    parser.add_argument("--input_data_file_prefix", help="input data file prefix", type=str,
                        default="50k_clean_rxnsmi_noreagent_allmapped")
    parser.add_argument("--output_folder", help="output folder", type=str)
    parser.add_argument("--location", help="location of script ['COLAB', 'LOCAL']", type=str, default="COLAB")

    parser.add_argument("--train", help="whether to generate on train data", action="store_true")
    parser.add_argument("--valid", help="whether to generate on valid data", action="store_true")
    parser.add_argument("--test", help="whether to generate on test data", action="store_true")
    parser.add_argument("--start_idx", help="Start idx (train)", type=int, default=0)
    parser.add_argument("--end_idx", help="End idx (train)", type=int)

    parser.add_argument("--beam_size", help="Beam size", type=int, default=50)
    parser.add_argument("--topk", help="How many top-k proposals to generate", type=int, default=200)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args() 

    phases = []
    start_idx, end_idx = None, None
    if args.train:
        print('Appending train')
        phases.append('train')
        start_idx = args.start_idx
        end_idx = args.end_idx  
    if args.valid:
        print('Appending valid')
        phases.append('valid')
    if args.test:
        print('Appending test')
        phases.append('test')
    if start_idx is None:
        start_idx = 0
        end_idx = None 

    gen_50k(
        topk=args.topk,
        beam_size=args.beam_size,
        phases=phases,
        start_idx=start_idx,
        end_idx=end_idx,
        location=args.location,
        input_data_folder=args.input_data_folder,
        input_data_file_prefix=args.input_data_file_prefix,
        output_folder=args.output_folder
    )
